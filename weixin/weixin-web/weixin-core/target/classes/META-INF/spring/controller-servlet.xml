<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">


	<!-- 加载配置属性文件 -->
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath*:application.properties" />

	<!--对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<!-- base-package 如果多个，用“,”分隔 -->
	<context:component-scan base-package="com.baoyuan.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 请求映射 -->
	<!-- 如果是REST风格的URL,静态资源就不会被拦截。因为我们精准的注入了拦截器 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
	</bean>
	
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringHttpMessageConverter" /><!-- String转换器 -->
				<ref bean="fastJsonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>

	<!-- 拦截器配置 -->
	<mvc:interceptors>
	    <ref bean="uriInterceptor" />
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<ref bean="controllerInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/admin/**" />
			<ref bean="weixinPermissionsInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/admin/**" />
			<ref bean="weixinLogInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/index.html" />

	<!-- 上传文件拦截，设置最大上传文件大小 10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10485760" />
		<!--resolveLazily属性启用是为了推迟文件解析，以便在UploadAction 中捕获文件大小异常 -->
		<property name="resolveLazily" value="true" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- 视图解释类 -->
	<!-- 针对freemarker的视图配置 -->
	<!-- 
	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	-->
	<bean id="freemarkerConfig" class="com.baoyuan.shiro.freemarker.ShiroFreemarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/template/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="number_format">0.##########</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="template_exception_handler">ignore</prop>
				<prop key="auto_import">spring.ftl as spring</prop>
			</props>
		</property>
	</bean>

	<bean id="freemarkerViewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="order" value="1" />
		<property name="cache" value="true" />
		<property name="prefix" value="" />
		<property name="suffix" value=".ftl" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="requestContextAttribute" value="request" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
	</bean>
	
	<!-- Mapping exception to the handler view -->
	<!-- 将Controller抛出的异常转到特定View -->
	<bean id="exceptionResolver"
		class="com.baoyuan.resolver.weixin.GlobalExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">errors/error</prop>
				<prop key="java.lang.Throwable">errors/throwable</prop>
			</props>
		</property>
		<property name="statusCodes">
			<props>
				<prop key="errors/error">500</prop>
				<prop key="errors/404">404</prop>
			</props>
		</property>
		<!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
		<property name="warnLogCategory" value="WARN" />
		<!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->  
		<property name="defaultErrorView" value="errors/error" />
		<!-- 默认HTTP状态码 -->
		<property name="defaultStatusCode" value="500" />
	</bean>

	<!-- 使用默认的Servlet来响应静态文件(允许对静态资源文件的访问) -->
	<mvc:default-servlet-handler />

	<!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="fastJsonHttpMessageConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
			</list>
		</property>
		<!-- <property name="serializerFeature"> 这个地方加上这个功能吧，能自己配置一些东西，比如时间的格式化，null输出""等等 
			</property> -->
	</bean>

	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/xml;charset=UTF-8</value>
			</list>
		</property>
	</bean>

</beans>